{
  package main
}

Start
  <- _ (
       ins:Instr _ Comment? _                                                   { return Forward(ins)                          }
     / lbl:Label _ Comment? _                                                   { return Forward(lbl)                          }
     / cmt:Comment _                                                            { return Forward(cmt)                          }
   ) !.

Instr   "instruction"
  <-          "nop"  cd:Cnd?                                                    { return NewNopInstr(s, cd)                    }

   / s:'!'? _ "clr"  cd:Cnd? _ rd:Reg                                           { return NewClrInstr(s, cd, rd)                }

//   / s:'!'? _ "inv"  cd:Cnd? _ rd:Reg                                           { return NewInvInstr(s, cd, rd)                }

   / s:'!'? _ "mov"  cd:Cnd? _ rd:Reg _ rb:Reg                                  { return NewRegMovInstr(s, op, cd, rd, rd, rb) }
   / s:'!'? _ "ldc"  cd:Cnd? _ rd:Reg _ nm:Num                                  { return NewLdcInstr(s, cd, rd, nm)            }
   / s:'!'? _ "lda"  cd:Cnd? _ rd:Reg _ lb:Label                                { return NewLdaInstr(s, cd, rd, lb)            }

//   / s:'!'? _ "swp"  cd:Cnd? _ ra:Reg _ rb:Reg                                  { return NewSwpInstr(s, cd, rd, nm)            }

   /          "ret"  cd:Cnd? _ ra:Reg                                           { return NewRetInstr(cd, rd)                   }
   /          "ret"  cd:Cnd?                                                    { return NewRetInstr(cd, "rp")                 }

   / s:'!'? _ op:SOp cd:Cnd? _ rd:Reg _ ra:Reg _ nm:Num                         { return NewShiftInstr(s, op, cd, rd, ra, nm)  }

   // psh
   
   // pop

   / s:'!'? _ op:DOp cd:Cnd? _ rd:Reg _ ra:Reg _ rb:Reg sh:Shift?               { return NewRegInstr(s, op, cd, rd, ra, rb)    }
   / s:'!'? _ op:DOp cd:Cnd? _ rd:Reg _ ra:Reg _ nm:Num                         { return NewI12Instr(s, op, cd, rd, ra, nm)    }
   / s:'!'? _ op:DOp cd:Cnd? _ rd:Reg _ nm:Num up:(_ "<<" _ "16")?              { return NewI16Instr(s, op, cd, up, rd, nm)    }

   / s:'!'? _ op:COp cd:Cnd? _ rd:Reg _ rb:Reg                                  { return NewRegInstr(s, op, cd, rd, rd, rb)    }
   / s:'!'? _ op:COp cd:Cnd? _ rd:Reg _ nm:Num up:(_ "<<" _ "16")?              { return NewI16Instr(s, op, cd, up, rd, nm)    }

   / s:'!'? _ op:MOp cd:Cnd? _ rd:Reg _ ra:Reg _ '[' _ rb:Reg _ ']'             { return NewMemRegInstr(s, op, cd, rd, ra, rb) }
   / s:'!'? _ op:MOp cd:Cnd? _ rd:Reg _ ra:Reg _ '[' _ nm:Num _ ']'             { return NewMemI12Instr(s, op, cd, rd, ra, nm) }

   /          op:BOp cd:Cnd? _ lb:Label                                         { return NewBraInstr(op, cd, lb)               }

Shift   "shift operation"          <- _ op:Zop _ nm:Num                         { return NewNumShift(op, nm)                   }     

DOp     "data operator"            <- ("add" / "sub" / "mul" / "div" / 
                                       "and" / "oor" / "xor" / "nor" /
                                       "adu" / "sbu" / "mlu" / "dvu")           { return NewString(c.text)                     }
COp     "comparison operator"      <- ("cmp" / "cpu" / "tst")                   { return NewString(c.text)                     }
MOp     "memory operator"          <- ("ldw" / "stw")                           { return NewString(c.text)                     }
BOp     "branch operator"          <- ("bra" / "brl")                           { return NewString(c.text)                     }
ZOp     "shift operator"           <- ("<<" / "<<>" / "<>>" / ">>" / ">>>")     { return NewString(c.text)                     }

SOp     "shift operator"           <- ("sll" / "rol" / "srl" / "sra")           { return NewString(c.text)                     }

Cnd     "condition flag"           <- ("nv" / "eq" / "lt" / "le" / 
                                       "gt" / "ge" / "ne" / "al")               { return NewString(c.text)                     }

Reg     "register"                 <- ("sp" / "rp" / "ip" / 'r' [0-9]+)         { return NewString(c.text)                     }

Num     "number"                   <- nm:(BinNum / HexNum / DecNum)             { return Forward(nm)                           }
BinNum  "binary number"            <- "0b" [01]+                                { return NewString(c.text)                     }
HexNum  "hexadecimal number"       <- "0x" [0-9a-f]+                            { return NewString(c.text)                     }
DecNum  "decimal number"           <- '-'? [0-9]+                               { return NewString(c.text)                     }

Label   "label"                    <- '@' [a-zA-Z0-9]+                          { return NewLabel(c.text)                      }

Comment                            <- "//" [^\n\r]*                             { return NewComment()                          }

_       "whitespace"               <- [ \n\r\t]*
