{
  package main
}

Start 
  <- _ (
       ins:Instruction Comment?      { return Forward(ins) }
     / lbl:Label                     { return Forward(lbl) }
     / comment:Comment               { return Forward(comment) }
   ) !.

Instruction 
  <- cmd:Command _
     rd:Register _ 
     ra:Register _ 
     ('[' _)? 
     rb:Register _ 
     (']' _)?                         { return NewRegInstruction(cmd.(*Command), rd.(*Register), ra.(*Register), rb.(*Register)) }
   
   / cmd:Command _
     rd:Register _ 
     ra:Register _ 
     ('[' _)? 
     num:Number _ 
     (']' _)?                         { return NewImmInstruction(cmd.(*Command), rd.(*Register), ra.(*Register), num.(*Number)) }

   / cmd:Command _ 
     lbl:Label _                      { return NewBraInstruction(cmd.(*Command), lbl.(*Label)) }

Command 
  <- set:'!'? _
     cmd:Mnemonic 
     cnd:Condition?                   { return NewCommand(set, cmd, cnd) }

Mnemonic <- [a-z][a-z][a-z]           { return NewString(c.text) }

Condition <- [a-z][a-z]               { return NewString(c.text) }

Register <- 'r' ([0-9] / ('1' [1-5])) { return NewRegister(c.text) }

Number <- num:(HexNumber / DecNumber) { return Forward(num) } 

DecNumber <- [+-]? [0-9]+             { return NewNumber(c.text, 10) }

HexNumber <- "0x" ([0-9] / [a-f])+    { return NewNumber(c.text[2:], 16) }

Label <- '@' ([a-z] / [A-Z] / [0-9])+ { return NewLabel(c.text) }

Comment <- "//" (![\n\r] .)* _        { return NewComment() }

_ "whitespace" <- [ \n\r\t]*
